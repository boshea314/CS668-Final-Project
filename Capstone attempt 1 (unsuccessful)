# -*- coding: utf-8 -*-
"""
Created on Mon Oct 18 16:02:27 2021

@author: Brian
"""


import numpy as np
import pandas as pd
import h5py
import os
import hdf5_getters as getters
import glob





###Getters Testing###

h5 = getters.open_h5_file_read('C:/Users/Brian/MillionSongSubset/B/G/A/TRBGACK12903CD5CF5.h5')



#Number of songs on the .h5 file
num_songs = getters.get_num_songs(h5)
print ("Number of songs on this file: ",num_songs)

#Name of the song
s_name = getters.get_title(h5)
print ("Song name:" ,s_name)

#Song ID
s_id = getters.get_song_id(h5)
print("Song ID", s_id)

#Year of song
year = getters.get_year(h5)
print("Year: " , year)

#Song Hottness
s_hottness = getters.get_song_hotttnesss(h5)
print("Song hottness: " , s_hottness)

#Duration of a single file
duration = getters.get_duration(h5)
print ("Song duration", duration)

#Name of the artist
a_name = getters.get_artist_name(h5)
print ("Artist name: ",a_name)

#Artist familiarity
familiarty = getters.get_artist_familiarity(h5)
print("Artist familiarity is: " , familiarty)

#Artist hottness
a_hot = getters.get_artist_hotttnesss(h5)
print("Artist hotness is: ", a_hot)

#Artist ID
a_id = getters.get_artist_id(h5)
print("Artist ID: " , a_id)

#Artist music brains ID
mb_id = getters.get_artist_mbid(h5)
print("MusicBrainz ID: ", mb_id)

#Playme ID for artist
p_id = getters.get_artist_playmeid(h5)
print("Playme ID: ", p_id)

#Artist latititude
latitude = getters.get_artist_latitude(h5)  

"Check if latitude is unknown before displaying" 
if latitude == 0 or pd.isna(latitude):
    print("Latitude is unknown")   
else:
    print("Latitude:", latitude)

#Artist Longitude
longitude = getters.get_artist_longitude(h5)
"Check if longitude is unknown before displaying" 
if latitude == 0 or pd.isna(latitude):
    print("Longitude is unknown")   
else:
    print("Longitude:", latitude)
    
#Artist Location
loc = getters.get_artist_location(h5)
if pd.isna(loc):
    print("Location unknown")
else:  
    print("Location:" , loc )

#Release
release = getters.get_release(h5)
print("Release:" , release)

## Returns a large array of artist ID which are similar
# =============================================================================
# #Similar artists
# sim_artists = getters.get_similar_artists(h5)
# print("Similar artists: ", sim_artists)
# ==============================================================================

#Sample Rate
sample_rate = getters.get_analysis_sample_rate(h5)
print("Sample rate: ", sample_rate)

#Danceability
dance = getters.get_danceability(h5)
print("Danceability:" , dance)

#Energy
energy = getters.get_energy(h5)
print("Energy: ", energy)

fade_in = getters.get_end_of_fade_in(h5)
if fade_in == 0:
    print("No fade in")
else:
    print("End of fade in: " , fade_in)
    
#Key and key Confidence
key = getters.get_key(h5)
key_conf = getters.get_key_confidence(h5)

print("The key is: " , key, " with " , key_conf, " confidence")

#Loudness
loud = getters.get_loudness(h5)
print("The loudness is: " , loud)

#Mode and mode confidence
mode = getters.get_mode(h5)
mode_conf = getters.get_mode_confidence(h5)

print("The mode is: " , mode, " with " , mode_conf, " confidence")

#Fade out
fade_out = getters.get_start_of_fade_out(h5)
print("Fade out start", fade_out )

#Tempo
tempo = getters.get_tempo(h5)
print("Tempo: ", tempo)

#Time signature
time_sig = getters.get_time_signature(h5)
print("Time Signature", time_sig)

time_sig_conf = getters.get_time_signature_confidence(h5)
print("Time signature confidence: ", time_sig_conf)

#Artist terms
terms = getters.get_artist_terms(h5)
print("Artist terms: ", terms)

h5.close()


###Column names of every file

#Show the column names of every file within the subset
directory = r'C:/Users/Brian/MillionSongSubset/B/G/A'
for entry in os.scandir(directory):
    if(entry.path.endswith(".h5")):
        with h5py.File(entry, 'r') as hdf:
            ls = list(hdf.keys())
            print('List of datasets in this file: \n', ls)
    
            for keys in hdf.keys():
                data = hdf.get(keys)
                dataset = np.array(data)
                print("Filename:", entry)
                print()
                print("The name of this data set is:", keys)
                print("Columns in this set:")
                print(dataset)
                print()



# =============================================================================
# 
# #Attempt to make dataframe out of h5 files
# df = pd.DataFrame(np.array(h5py.File('C:/Users/Brian/MillionSongSubset/B/G/A/TRBGACK12903CD5CF5.h5')['analysis']))
# print(df)
# 
# with h5py.File('C:/Users/Brian/MillionSongSubset/B/G/A/TRBGACK12903CD5CF5.h5', 'r') as hdf:
#             ls = list(hdf.keys())
#             print('List of datasets in this file: \n', ls)
#     
#             
#             data = hdf.get('analysis')
#             dataset = np.array(data)
#                 
#             print()
#             print("The name of this data set is: analysis")
#             print("Columns in this set:")
#             print(dataset)
#             print()
#             
#             print()
# 
# =============================================================================


####Attempt with the .txt file

# =============================================================================
# text_test = pd.read_csv('C:/Users/Brian/Downloads/YearPredictionMSD.txt/YearPredictionMSD.txt')
# 
# print(text_test.head())
# =============================================================================



# =============================================================================
# def get_all_titles(basedir,ext='.h5') :
#     titles = []
#     for root, dirs, files in os.walk(basedir):
#         files = glob.glob(os.path.join(root,'*'+ext))
#         for f in files:
#             h5 = hdf5_getters.open_h5_file_read(f)
#             titles.append( hdf5_getters.get_title(h5) )
#             h5.close()
#     return titles
# 
# 
# =============================================================================
